# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: tmux-256color
window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 80
    lines: 24
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2
  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false
  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: none
  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed
  # Window title
  title: Alacritty
  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty
  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  gtk_theme_variant: None
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 1.0
scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000
  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3
# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux) monospace
    #   - (Windows) Consolas
    family: Fira Code
    # The `style` can be specified to pick a specific face.
    style: Regular
  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Fira Code
    # The `style` can be specified to pick a specific face.
    style: Bold
  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: Fira Sans
    # The `style` can be specified to pick a specific face.
    style: Book Italic
  # Point size
  size: 15.0
  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0
  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0
  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true
debug:
  # Display the time it takes to redraw each frame.
  render_timer: false
  # Keep the log file after quitting Alacritty.
  persistent_logging: true
# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true
monokai: &monokai
  background: '0x272822'
  foreground: '0xeaeaea'
solarized-light: &light
  background: '0xFDF6E3'
  foreground: '0x657B83'
solarized-dark: &dark
  background: '0x002B36'
  foreground: '0x8AA8B3'
# Colors (Tomorrow Night Bright)
colors:
  # Default colors
  primary: *light
  # Bright and dim foreground colors
  #
  # The dimmed foreground color is calculated automatically if it is not present.
  # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
  # is `false`, the normal foreground color will be used.
  #dim_foreground: '0x9a9a9a'
  #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  #cursor:
  #  text: '0x000000'
  #  cursor: '0xffffff'

  # Normal colors
  normal:
    black: '0x000000'
    red: '0xCC0000'
    green: '0x4E9A06'
    yellow: '0xC4A000'
    blue: '0x3465A4'
    magenta: '0x75507B'
    cyan: '0x06989A'
    white: '0xD3D7CF'
  # Bright colors
  bright:
    black: '0x555753'
    red: '0xEF2929'
    green: '0x8AE234'
    yellow: '0xFCE94F'
    blue: '0x729FCF'
    magenta: '0xAD7FA8'
    cyan: '0x34E2E2'
    white: '0xEEEEEC'
    # Dim colors
    #
    # If the dim colors are not set, they will be calculated automatically based
    # on the `normal` colors.
    # dim:
    #   black:   '0x333333'
    #   red:     '0xf2777a'
    #   green:   '0x99cc99'
    #   yellow:  '0xffcc66'
    #   blue:    '0x6699cc'
    #   magenta: '0xcc99cc'
    #   cyan:    '0x66cccc'
    #   white:   '0xdddddd'
# Indexed Colors
#
# The indexed colors include all colors from 16 to 256.
# When these are not set, they're filled with sensible defaults.
#
# Example:
#   `- { index: 16, color: '0xff00ff' }`
#
#indexed_colors: []

# Bell
#
# The bell is rung every time the BEL control character is received.
bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: EaseOutExpo
  # Duration of the visual bell flash. A `duration` of `0` will disable the
  # visual bell animation.
  duration: 3
  # Visual bell animation color.
  color: '#ffffff'
  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None
# Background opacity
#
# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - {mouse: Middle, action: PasteSelection}
mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: {threshold: 300}
  triple_click: {threshold: 300}
  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true
selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"
  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true
cursor:
  # Cursor style
  style:
    # Cursor shape
    #
    # Values for `shape`:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block
    # Cursor blinking state
    #
    # Values for `blinking`:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Always
  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  #vi_mode_style: None

  # Cursor blinking interval in milliseconds.
  blink_interval: 600
  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true
  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15
# Live config reload (changes require restart)
live_config_reload: true
# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
hints:
  # Keys used for the hint labels.
  alphabet: "jfkdls;ahgurieowpq"
  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods` and `mouse.mods` accept
  # the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  enabled:
    - regex: "(magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\0-\x1F\x7F-\x9F<>\"\\s{-}\\^⟨⟩`]+"
      command: xdg-open
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: U
        mods: Control|Shift
# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (Linux/macOS) /bin/bash --login
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# WinPTY backend (Windows only)
#
# Alacritty defaults to using the newer ConPTY backend if it is available,
# since it resolves a lot of bugs and is quite a bit faster. If it is not
# available, the WinPTY backend will be used instead.
#
# Setting this option to `true` makes Alacritty use the legacy WinPTY backend,
# even if the ConPTY backend is available.
#winpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true
# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#       Open URLs at the cursor location with the launcher configured in `url.launcher`.
#   - Up
#       Move the vi mode cursor up by one line.
#   - Down
#       Move the vi mode cursor down by one line.
#   - Left
#       Move the vi mode cursor left by one character.
#   - Right
#       Move the vi mode cursor right by one character.
#   - First
#       Move the vi mode cursor to the start of the line, searching across newlines if it is already at the beginning.
#   - Last
#       Move the vi mode cursor to the end of the line, searching across newlines if it is already at the end.
#   - FirstOccupied
#       Move the vi mode cursor to the first non-empty cell in this line, searching across newlines if it is already at the first one.
#   - High
#       Move the vi mode cursor to the top of the screen.
#   - Middle
#       Move the vi mode cursor to the middle of the screen.
#   - Low
#       Move the vi mode cursor to the bottom of the screen.
#   - SemanticLeft
#       Move the vi mode cursor to the start of the previous semantically separated word.
#   - SemanticRight
#       Move the vi mode cursor to the start of the next semantically separated word.
#   - SemanticLeftEnd
#       Move the vi mode cursor to the end of the previous semantically separated word.
#   - SemanticRightEnd
#       Move the vi mode cursor to the end of the next semantically separated word.
#   - WordLeft
#       Move the vi mode cursor to the start of the previous whitespace separated word.
#   - WordRight
#       Move the vi mode cursor to the start of the next whitespace separated word.
#   - WordLeftEnd
#       Move the vi mode cursor to the end of the previous whitespace separated word.
#   - WordRightEnd
#       Move the vi mode cursor to the end of the next whitespace separated word.
#   - Bracket
#       Move the vi mode cursor to the next character that matches the bracket at the cursor's
#       current location.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - SearchNext
#       Jump to the beginning of the next match.
#   - SearchPrevious
#       Jump to the beginning of the previous match.
#   - SearchStart
#       Jump to the next start of a match to the left of the vi mode cursor.
#   - SearchEnd
#       Jump to the next end of a match to the left of the vi mode cursor.
#
#   (macOS only):
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
#   (Linux/BSD only):
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  # (Windows, Linux, and BSD only)
  - {key: C, mods: Control|Shift, chars: "\x03"}
  - {key: V, mods: Control|Shift, chars: "\x16"}
  - {key: C, mods: Control, action: Copy}
  - {key: V, mods: Control, action: Paste}
  - {key: Key0, mods: Control, action: ResetFontSize}
  - {key: Equals, mods: Control, action: IncreaseFontSize}
  - {key: Minus, mods: Control, action: DecreaseFontSize}

# Vi Mode
#- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
#- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
#- { key: Escape,                      mode: Vi, action: ClearSelection          }
#- { key: I,                           mode: Vi, action: ScrollToBottom          }
#- { key: I,                           mode: Vi, action: ToggleViMode            }
#- { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
#- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
#- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
#- { key: G,                           mode: Vi, action: ScrollToTop             }
#- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
#- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
#- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
#- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
#- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
#- { key: Y,                           mode: Vi, action: Copy                    }
#- { key: Y,                           mode: Vi, action: ClearSelection          }
#- { key: Copy,                        mode: Vi, action: ClearSelection          }
#- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
#- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
#- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
#- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
#- { key: Return,                      mode: Vi, action: Open                    }
#- { key: K,                           mode: Vi, action: Up                      }
#- { key: J,                           mode: Vi, action: Down                    }
#- { key: H,                           mode: Vi, action: Left                    }
#- { key: L,                           mode: Vi, action: Right                   }
#- { key: Up,                          mode: Vi, action: Up                      }
#- { key: Down,                        mode: Vi, action: Down                    }
#- { key: Left,                        mode: Vi, action: Left                    }
#- { key: Right,                       mode: Vi, action: Right                   }
#- { key: Key0,                        mode: Vi, action: First                   }
#- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
#- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
#- { key: H,      mods: Shift,         mode: Vi, action: High                    }
#- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
#- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
#- { key: B,                           mode: Vi, action: SemanticLeft            }
#- { key: W,                           mode: Vi, action: SemanticRight           }
#- { key: E,                           mode: Vi, action: SemanticRightEnd        }
#- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
#- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
#- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
#- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
#- { key: Slash,                       mode: Vi, action: SearchForward           }
#- { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
#- { key: N,                           mode: Vi, action: SearchNext              }
#- { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }
